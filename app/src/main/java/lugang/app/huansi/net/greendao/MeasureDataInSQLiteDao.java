package lugang.app.huansi.net.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import lugang.app.huansi.net.db.MeasureDataInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE_DATA_IN_SQLITE".
*/
public class MeasureDataInSQLiteDao extends AbstractDao<MeasureDataInSQLite, Long> {

    public static final String TABLENAME = "MEASURE_DATA_IN_SQLITE";

    /**
     * Properties of entity MeasureDataInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Person = new Property(2, String.class, "person", false, "PERSON");
        public final static Property OrderId = new Property(3, String.class, "orderId", false, "ORDER_ID");
        public final static Property UserGUID = new Property(4, String.class, "userGUID", false, "USER_GUID");
        public final static Property ISdOrderMeterDtlId = new Property(5, String.class, "iSdOrderMeterDtlId", false, "I_SD_ORDER_METER_DTL_ID");
        public final static Property ISdStyleTypeMstId = new Property(6, String.class, "iSdStyleTypeMstId", false, "I_SD_STYLE_TYPE_MST_ID");
        public final static Property SBillNo = new Property(7, String.class, "sBillNo", false, "S_BILL_NO");
        public final static Property SValueCode = new Property(8, String.class, "sValueCode", false, "S_VALUE_CODE");
        public final static Property SValueGroup = new Property(9, String.class, "sValueGroup", false, "S_VALUE_GROUP");
        public final static Property SdStyleTypeItemDtlId = new Property(10, String.class, "sdStyleTypeItemDtlId", false, "SD_STYLE_TYPE_ITEM_DTL_ID");
        public final static Property SMeterCode = new Property(11, String.class, "sMeterCode", false, "S_METER_CODE");
        public final static Property SMeterName = new Property(12, String.class, "sMeterName", false, "S_METER_NAME");
        public final static Property ISeq = new Property(13, String.class, "iSeq", false, "I_SEQ");
        public final static Property IStyleseq = new Property(14, String.class, "iStyleseq", false, "I_STYLESEQ");
        public final static Property ISMeterSize = new Property(15, String.class, "iSMeterSize", false, "I_SMETER_SIZE");
        public final static Property SFemaleMinLenth = new Property(16, String.class, "sFemaleMinLenth", false, "S_FEMALE_MIN_LENTH");
        public final static Property SFemaleMaxLenth = new Property(17, String.class, "sFemaleMaxLenth", false, "S_FEMALE_MAX_LENTH");
        public final static Property SMaleMinLenth = new Property(18, String.class, "sMaleMinLenth", false, "S_MALE_MIN_LENTH");
        public final static Property SMaleMaxLenth = new Property(19, String.class, "sMaleMaxLenth", false, "S_MALE_MAX_LENTH");
        public final static Property BEvenNo = new Property(20, String.class, "bEvenNo", false, "B_EVEN_NO");
        public final static Property BPoint = new Property(21, String.class, "bPoint", false, "B_POINT");
        public final static Property Sex = new Property(22, String.class, "sex", false, "SEX");
        public final static Property Count = new Property(23, int.class, "count", false, "COUNT");
        public final static Property IsAdd = new Property(24, boolean.class, "isAdd", false, "IS_ADD");
    };


    public MeasureDataInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureDataInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE_DATA_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"PERSON\" TEXT," + // 2: person
                "\"ORDER_ID\" TEXT," + // 3: orderId
                "\"USER_GUID\" TEXT," + // 4: userGUID
                "\"I_SD_ORDER_METER_DTL_ID\" TEXT," + // 5: iSdOrderMeterDtlId
                "\"I_SD_STYLE_TYPE_MST_ID\" TEXT," + // 6: iSdStyleTypeMstId
                "\"S_BILL_NO\" TEXT," + // 7: sBillNo
                "\"S_VALUE_CODE\" TEXT," + // 8: sValueCode
                "\"S_VALUE_GROUP\" TEXT," + // 9: sValueGroup
                "\"SD_STYLE_TYPE_ITEM_DTL_ID\" TEXT," + // 10: sdStyleTypeItemDtlId
                "\"S_METER_CODE\" TEXT," + // 11: sMeterCode
                "\"S_METER_NAME\" TEXT," + // 12: sMeterName
                "\"I_SEQ\" TEXT," + // 13: iSeq
                "\"I_STYLESEQ\" TEXT," + // 14: iStyleseq
                "\"I_SMETER_SIZE\" TEXT," + // 15: iSMeterSize
                "\"S_FEMALE_MIN_LENTH\" TEXT," + // 16: sFemaleMinLenth
                "\"S_FEMALE_MAX_LENTH\" TEXT," + // 17: sFemaleMaxLenth
                "\"S_MALE_MIN_LENTH\" TEXT," + // 18: sMaleMinLenth
                "\"S_MALE_MAX_LENTH\" TEXT," + // 19: sMaleMaxLenth
                "\"B_EVEN_NO\" TEXT," + // 20: bEvenNo
                "\"B_POINT\" TEXT," + // 21: bPoint
                "\"SEX\" TEXT," + // 22: sex
                "\"COUNT\" INTEGER NOT NULL ," + // 23: count
                "\"IS_ADD\" INTEGER NOT NULL );"); // 24: isAdd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE_DATA_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeasureDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(3, person);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(4, orderId);
        }
 
        String userGUID = entity.getUserGUID();
        if (userGUID != null) {
            stmt.bindString(5, userGUID);
        }
 
        String iSdOrderMeterDtlId = entity.getISdOrderMeterDtlId();
        if (iSdOrderMeterDtlId != null) {
            stmt.bindString(6, iSdOrderMeterDtlId);
        }
 
        String iSdStyleTypeMstId = entity.getISdStyleTypeMstId();
        if (iSdStyleTypeMstId != null) {
            stmt.bindString(7, iSdStyleTypeMstId);
        }
 
        String sBillNo = entity.getSBillNo();
        if (sBillNo != null) {
            stmt.bindString(8, sBillNo);
        }
 
        String sValueCode = entity.getSValueCode();
        if (sValueCode != null) {
            stmt.bindString(9, sValueCode);
        }
 
        String sValueGroup = entity.getSValueGroup();
        if (sValueGroup != null) {
            stmt.bindString(10, sValueGroup);
        }
 
        String sdStyleTypeItemDtlId = entity.getSdStyleTypeItemDtlId();
        if (sdStyleTypeItemDtlId != null) {
            stmt.bindString(11, sdStyleTypeItemDtlId);
        }
 
        String sMeterCode = entity.getSMeterCode();
        if (sMeterCode != null) {
            stmt.bindString(12, sMeterCode);
        }
 
        String sMeterName = entity.getSMeterName();
        if (sMeterName != null) {
            stmt.bindString(13, sMeterName);
        }
 
        String iSeq = entity.getISeq();
        if (iSeq != null) {
            stmt.bindString(14, iSeq);
        }
 
        String iStyleseq = entity.getIStyleseq();
        if (iStyleseq != null) {
            stmt.bindString(15, iStyleseq);
        }
 
        String iSMeterSize = entity.getISMeterSize();
        if (iSMeterSize != null) {
            stmt.bindString(16, iSMeterSize);
        }
 
        String sFemaleMinLenth = entity.getSFemaleMinLenth();
        if (sFemaleMinLenth != null) {
            stmt.bindString(17, sFemaleMinLenth);
        }
 
        String sFemaleMaxLenth = entity.getSFemaleMaxLenth();
        if (sFemaleMaxLenth != null) {
            stmt.bindString(18, sFemaleMaxLenth);
        }
 
        String sMaleMinLenth = entity.getSMaleMinLenth();
        if (sMaleMinLenth != null) {
            stmt.bindString(19, sMaleMinLenth);
        }
 
        String sMaleMaxLenth = entity.getSMaleMaxLenth();
        if (sMaleMaxLenth != null) {
            stmt.bindString(20, sMaleMaxLenth);
        }
 
        String bEvenNo = entity.getBEvenNo();
        if (bEvenNo != null) {
            stmt.bindString(21, bEvenNo);
        }
 
        String bPoint = entity.getBPoint();
        if (bPoint != null) {
            stmt.bindString(22, bPoint);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(23, sex);
        }
        stmt.bindLong(24, entity.getCount());
        stmt.bindLong(25, entity.getIsAdd() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeasureDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String person = entity.getPerson();
        if (person != null) {
            stmt.bindString(3, person);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(4, orderId);
        }
 
        String userGUID = entity.getUserGUID();
        if (userGUID != null) {
            stmt.bindString(5, userGUID);
        }
 
        String iSdOrderMeterDtlId = entity.getISdOrderMeterDtlId();
        if (iSdOrderMeterDtlId != null) {
            stmt.bindString(6, iSdOrderMeterDtlId);
        }
 
        String iSdStyleTypeMstId = entity.getISdStyleTypeMstId();
        if (iSdStyleTypeMstId != null) {
            stmt.bindString(7, iSdStyleTypeMstId);
        }
 
        String sBillNo = entity.getSBillNo();
        if (sBillNo != null) {
            stmt.bindString(8, sBillNo);
        }
 
        String sValueCode = entity.getSValueCode();
        if (sValueCode != null) {
            stmt.bindString(9, sValueCode);
        }
 
        String sValueGroup = entity.getSValueGroup();
        if (sValueGroup != null) {
            stmt.bindString(10, sValueGroup);
        }
 
        String sdStyleTypeItemDtlId = entity.getSdStyleTypeItemDtlId();
        if (sdStyleTypeItemDtlId != null) {
            stmt.bindString(11, sdStyleTypeItemDtlId);
        }
 
        String sMeterCode = entity.getSMeterCode();
        if (sMeterCode != null) {
            stmt.bindString(12, sMeterCode);
        }
 
        String sMeterName = entity.getSMeterName();
        if (sMeterName != null) {
            stmt.bindString(13, sMeterName);
        }
 
        String iSeq = entity.getISeq();
        if (iSeq != null) {
            stmt.bindString(14, iSeq);
        }
 
        String iStyleseq = entity.getIStyleseq();
        if (iStyleseq != null) {
            stmt.bindString(15, iStyleseq);
        }
 
        String iSMeterSize = entity.getISMeterSize();
        if (iSMeterSize != null) {
            stmt.bindString(16, iSMeterSize);
        }
 
        String sFemaleMinLenth = entity.getSFemaleMinLenth();
        if (sFemaleMinLenth != null) {
            stmt.bindString(17, sFemaleMinLenth);
        }
 
        String sFemaleMaxLenth = entity.getSFemaleMaxLenth();
        if (sFemaleMaxLenth != null) {
            stmt.bindString(18, sFemaleMaxLenth);
        }
 
        String sMaleMinLenth = entity.getSMaleMinLenth();
        if (sMaleMinLenth != null) {
            stmt.bindString(19, sMaleMinLenth);
        }
 
        String sMaleMaxLenth = entity.getSMaleMaxLenth();
        if (sMaleMaxLenth != null) {
            stmt.bindString(20, sMaleMaxLenth);
        }
 
        String bEvenNo = entity.getBEvenNo();
        if (bEvenNo != null) {
            stmt.bindString(21, bEvenNo);
        }
 
        String bPoint = entity.getBPoint();
        if (bPoint != null) {
            stmt.bindString(22, bPoint);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(23, sex);
        }
        stmt.bindLong(24, entity.getCount());
        stmt.bindLong(25, entity.getIsAdd() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeasureDataInSQLite readEntity(Cursor cursor, int offset) {
        MeasureDataInSQLite entity = new MeasureDataInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // person
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userGUID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // iSdOrderMeterDtlId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // iSdStyleTypeMstId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sBillNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sValueCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sValueGroup
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sdStyleTypeItemDtlId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sMeterCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sMeterName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // iSeq
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // iStyleseq
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // iSMeterSize
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // sFemaleMinLenth
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // sFemaleMaxLenth
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // sMaleMinLenth
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // sMaleMaxLenth
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // bEvenNo
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // bPoint
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // sex
            cursor.getInt(offset + 23), // count
            cursor.getShort(offset + 24) != 0 // isAdd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeasureDataInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setPerson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserGUID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setISdOrderMeterDtlId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setISdStyleTypeMstId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSBillNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSValueCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSValueGroup(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSdStyleTypeItemDtlId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSMeterCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSMeterName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setISeq(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIStyleseq(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setISMeterSize(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSFemaleMinLenth(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSFemaleMaxLenth(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSMaleMinLenth(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSMaleMaxLenth(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBEvenNo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBPoint(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSex(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCount(cursor.getInt(offset + 23));
        entity.setIsAdd(cursor.getShort(offset + 24) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeasureDataInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeasureDataInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
