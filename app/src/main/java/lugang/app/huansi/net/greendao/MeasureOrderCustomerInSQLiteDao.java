//package lugang.app.huansi.net.greendao;
//
//import android.database.Cursor;
//import android.database.sqlite.SQLiteStatement;
//
//import org.greenrobot.greendao.AbstractDao;
//import org.greenrobot.greendao.Property;
//import org.greenrobot.greendao.internal.DaoConfig;
//import org.greenrobot.greendao.database.Database;
//import org.greenrobot.greendao.database.DatabaseStatement;
//
//import lugang.app.huansi.net.db.MeasureOrderCustomerInSQLite;
//
//// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
///**
// * DAO for table "MEASURE_ORDER_CUSTOMER_IN_SQLITE".
//*/
//public class MeasureOrderCustomerInSQLiteDao extends AbstractDao<MeasureOrderCustomerInSQLite, Long> {
//
//    public static final String TABLENAME = "MEASURE_ORDER_CUSTOMER_IN_SQLITE";
//
//    /**
//     * Properties of entity MeasureOrderCustomerInSQLite.<br/>
//     * Can be used for QueryBuilder and for referencing column names.
//    */
//    public static class Properties {
//        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
//        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
//        public final static Property UserGUID = new Property(2, String.class, "userGUID", false, "USER_GUID");
//        public final static Property SCustomerName = new Property(3, String.class, "sCustomerName", false, "S_CUSTOMER_NAME");
//    };
//
//
//    public MeasureOrderCustomerInSQLiteDao(DaoConfig config) {
//        super(config);
//    }
//
//    public MeasureOrderCustomerInSQLiteDao(DaoConfig config, DaoSession daoSession) {
//        super(config, daoSession);
//    }
//
//    /** Creates the underlying database table. */
//    public static void createTable(Database db, boolean ifNotExists) {
//        String constraint = ifNotExists? "IF NOT EXISTS ": "";
//        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE_ORDER_CUSTOMER_IN_SQLITE\" (" + //
//                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
//                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
//                "\"USER_GUID\" TEXT," + // 2: userGUID
//                "\"S_CUSTOMER_NAME\" TEXT);"); // 3: sCustomerName
//    }
//
//    /** Drops the underlying database table. */
//    public static void dropTable(Database db, boolean ifExists) {
//        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE_ORDER_CUSTOMER_IN_SQLITE\"";
//        db.execSQL(sql);
//    }
//
//    @Override
//    protected final void bindValues(DatabaseStatement stmt, MeasureOrderCustomerInSQLite entity) {
//        stmt.clearBindings();
//
//        Long id = entity.getId();
//        if (id != null) {
//            stmt.bindLong(1, id);
//        }
//        stmt.bindLong(2, entity.getType());
//
//        String userGUID = entity.getUserGUID();
//        if (userGUID != null) {
//            stmt.bindString(3, userGUID);
//        }
//
//        String sCustomerName = entity.getSCustomerName();
//        if (sCustomerName != null) {
//            stmt.bindString(4, sCustomerName);
//        }
//    }
//
//    @Override
//    protected final void bindValues(SQLiteStatement stmt, MeasureOrderCustomerInSQLite entity) {
//        stmt.clearBindings();
//
//        Long id = entity.getId();
//        if (id != null) {
//            stmt.bindLong(1, id);
//        }
//        stmt.bindLong(2, entity.getType());
//
//        String userGUID = entity.getUserGUID();
//        if (userGUID != null) {
//            stmt.bindString(3, userGUID);
//        }
//
//        String sCustomerName = entity.getSCustomerName();
//        if (sCustomerName != null) {
//            stmt.bindString(4, sCustomerName);
//        }
//    }
//
//    @Override
//    public Long readKey(Cursor cursor, int offset) {
//        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
//    }
//
//    @Override
//    public MeasureOrderCustomerInSQLite readEntity(Cursor cursor, int offset) {
//        MeasureOrderCustomerInSQLite entity = new MeasureOrderCustomerInSQLite( //
//            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
//            cursor.getInt(offset + 1), // type
//            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userGUID
//            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sCustomerName
//        );
//        return entity;
//    }
//
//    @Override
//    public void readEntity(Cursor cursor, MeasureOrderCustomerInSQLite entity, int offset) {
//        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
//        entity.setType(cursor.getInt(offset + 1));
//        entity.setUserGUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
//        entity.setSCustomerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
//     }
//
//    @Override
//    protected final Long updateKeyAfterInsert(MeasureOrderCustomerInSQLite entity, long rowId) {
//        entity.setId(rowId);
//        return rowId;
//    }
//
//    @Override
//    public Long getKey(MeasureOrderCustomerInSQLite entity) {
//        if(entity != null) {
//            return entity.getId();
//        } else {
//            return null;
//        }
//    }
//
//    @Override
//    protected final boolean isEntityUpdateable() {
//        return true;
//    }
//
//}
