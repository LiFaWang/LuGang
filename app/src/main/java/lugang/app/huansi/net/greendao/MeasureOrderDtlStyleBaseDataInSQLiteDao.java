package lugang.app.huansi.net.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import lugang.app.huansi.net.db.MeasureOrderDtlStyleBaseDataInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE_ORDER_DTL_STYLE_BASE_DATA_IN_SQLITE".
*/
public class MeasureOrderDtlStyleBaseDataInSQLiteDao extends AbstractDao<MeasureOrderDtlStyleBaseDataInSQLite, Long> {

    public static final String TABLENAME = "MEASURE_ORDER_DTL_STYLE_BASE_DATA_IN_SQLITE";

    /**
     * Properties of entity MeasureOrderDtlStyleBaseDataInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ISdStyleTypeMstId = new Property(1, String.class, "iSdStyleTypeMstId", false, "I_SD_STYLE_TYPE_MST_ID");
        public final static Property SBillNo = new Property(2, String.class, "sBillNo", false, "S_BILL_NO");
        public final static Property SValueCode = new Property(3, String.class, "sValueCode", false, "S_VALUE_CODE");
        public final static Property SValueGroup = new Property(4, String.class, "sValueGroup", false, "S_VALUE_GROUP");
        public final static Property ISdStyleTypeItemDtlId = new Property(5, String.class, "iSdStyleTypeItemDtlId", false, "I_SD_STYLE_TYPE_ITEM_DTL_ID");
        public final static Property SMeterCode = new Property(6, String.class, "sMeterCode", false, "S_METER_CODE");
        public final static Property SMeterName = new Property(7, String.class, "sMeterName", false, "S_METER_NAME");
        public final static Property ISeq = new Property(8, String.class, "iSeq", false, "I_SEQ");
    };


    public MeasureOrderDtlStyleBaseDataInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureOrderDtlStyleBaseDataInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE_ORDER_DTL_STYLE_BASE_DATA_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"I_SD_STYLE_TYPE_MST_ID\" TEXT," + // 1: iSdStyleTypeMstId
                "\"S_BILL_NO\" TEXT," + // 2: sBillNo
                "\"S_VALUE_CODE\" TEXT," + // 3: sValueCode
                "\"S_VALUE_GROUP\" TEXT," + // 4: sValueGroup
                "\"I_SD_STYLE_TYPE_ITEM_DTL_ID\" TEXT," + // 5: iSdStyleTypeItemDtlId
                "\"S_METER_CODE\" TEXT," + // 6: sMeterCode
                "\"S_METER_NAME\" TEXT," + // 7: sMeterName
                "\"I_SEQ\" TEXT);"); // 8: iSeq
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE_ORDER_DTL_STYLE_BASE_DATA_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeasureOrderDtlStyleBaseDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iSdStyleTypeMstId = entity.getISdStyleTypeMstId();
        if (iSdStyleTypeMstId != null) {
            stmt.bindString(2, iSdStyleTypeMstId);
        }
 
        String sBillNo = entity.getSBillNo();
        if (sBillNo != null) {
            stmt.bindString(3, sBillNo);
        }
 
        String sValueCode = entity.getSValueCode();
        if (sValueCode != null) {
            stmt.bindString(4, sValueCode);
        }
 
        String sValueGroup = entity.getSValueGroup();
        if (sValueGroup != null) {
            stmt.bindString(5, sValueGroup);
        }
 
        String iSdStyleTypeItemDtlId = entity.getISdStyleTypeItemDtlId();
        if (iSdStyleTypeItemDtlId != null) {
            stmt.bindString(6, iSdStyleTypeItemDtlId);
        }
 
        String sMeterCode = entity.getSMeterCode();
        if (sMeterCode != null) {
            stmt.bindString(7, sMeterCode);
        }
 
        String sMeterName = entity.getSMeterName();
        if (sMeterName != null) {
            stmt.bindString(8, sMeterName);
        }
 
        String iSeq = entity.getISeq();
        if (iSeq != null) {
            stmt.bindString(9, iSeq);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeasureOrderDtlStyleBaseDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String iSdStyleTypeMstId = entity.getISdStyleTypeMstId();
        if (iSdStyleTypeMstId != null) {
            stmt.bindString(2, iSdStyleTypeMstId);
        }
 
        String sBillNo = entity.getSBillNo();
        if (sBillNo != null) {
            stmt.bindString(3, sBillNo);
        }
 
        String sValueCode = entity.getSValueCode();
        if (sValueCode != null) {
            stmt.bindString(4, sValueCode);
        }
 
        String sValueGroup = entity.getSValueGroup();
        if (sValueGroup != null) {
            stmt.bindString(5, sValueGroup);
        }
 
        String iSdStyleTypeItemDtlId = entity.getISdStyleTypeItemDtlId();
        if (iSdStyleTypeItemDtlId != null) {
            stmt.bindString(6, iSdStyleTypeItemDtlId);
        }
 
        String sMeterCode = entity.getSMeterCode();
        if (sMeterCode != null) {
            stmt.bindString(7, sMeterCode);
        }
 
        String sMeterName = entity.getSMeterName();
        if (sMeterName != null) {
            stmt.bindString(8, sMeterName);
        }
 
        String iSeq = entity.getISeq();
        if (iSeq != null) {
            stmt.bindString(9, iSeq);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeasureOrderDtlStyleBaseDataInSQLite readEntity(Cursor cursor, int offset) {
        MeasureOrderDtlStyleBaseDataInSQLite entity = new MeasureOrderDtlStyleBaseDataInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // iSdStyleTypeMstId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sBillNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sValueCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sValueGroup
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // iSdStyleTypeItemDtlId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sMeterCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sMeterName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // iSeq
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeasureOrderDtlStyleBaseDataInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setISdStyleTypeMstId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSBillNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSValueCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSValueGroup(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setISdStyleTypeItemDtlId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSMeterCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSMeterName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setISeq(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeasureOrderDtlStyleBaseDataInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeasureOrderDtlStyleBaseDataInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
