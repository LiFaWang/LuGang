package lugang.app.huansi.net.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import lugang.app.huansi.net.db.MeasureOrderInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE_ORDER_IN_SQLITE".
*/
public class MeasureOrderInSQLiteDao extends AbstractDao<MeasureOrderInSQLite, Long> {

    public static final String TABLENAME = "MEASURE_ORDER_IN_SQLITE";

    /**
     * Properties of entity MeasureOrderInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderType = new Property(1, int.class, "orderType", false, "ORDER_TYPE");
        public final static Property UserGUID = new Property(2, String.class, "userGUID", false, "USER_GUID");
        public final static Property SJobName = new Property(3, String.class, "sJobName", false, "S_JOB_NAME");
        public final static Property ISdOrderMeterMstId = new Property(4, String.class, "iSdOrderMeterMstId", false, "I_SD_ORDER_METER_MST_ID");
        public final static Property SAreaName = new Property(5, String.class, "sAreaName", false, "S_AREA_NAME");
        public final static Property SCityName = new Property(6, String.class, "sCityName", false, "S_CITY_NAME");
        public final static Property SCountyName = new Property(7, String.class, "sCountyName", false, "S_COUNTY_NAME");
        public final static Property SCustomerName = new Property(8, String.class, "sCustomerName", false, "S_CUSTOMER_NAME");
        public final static Property SCustomerCode = new Property(9, String.class, "sCustomerCode", false, "S_CUSTOMER_CODE");
        public final static Property SDepartmentName = new Property(10, String.class, "sDepartmentName", false, "S_DEPARTMENT_NAME");
        public final static Property SPerson = new Property(11, String.class, "sPerson", false, "S_PERSON");
        public final static Property SBillNo = new Property(12, String.class, "sBillNo", false, "S_BILL_NO");
        public final static Property Sex = new Property(13, String.class, "sex", false, "SEX");
    };


    public MeasureOrderInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureOrderInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE_ORDER_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_TYPE\" INTEGER NOT NULL ," + // 1: orderType
                "\"USER_GUID\" TEXT," + // 2: userGUID
                "\"S_JOB_NAME\" TEXT," + // 3: sJobName
                "\"I_SD_ORDER_METER_MST_ID\" TEXT," + // 4: iSdOrderMeterMstId
                "\"S_AREA_NAME\" TEXT," + // 5: sAreaName
                "\"S_CITY_NAME\" TEXT," + // 6: sCityName
                "\"S_COUNTY_NAME\" TEXT," + // 7: sCountyName
                "\"S_CUSTOMER_NAME\" TEXT," + // 8: sCustomerName
                "\"S_CUSTOMER_CODE\" TEXT," + // 9: sCustomerCode
                "\"S_DEPARTMENT_NAME\" TEXT," + // 10: sDepartmentName
                "\"S_PERSON\" TEXT," + // 11: sPerson
                "\"S_BILL_NO\" TEXT," + // 12: sBillNo
                "\"SEX\" TEXT);"); // 13: sex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE_ORDER_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeasureOrderInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderType());
 
        String userGUID = entity.getUserGUID();
        if (userGUID != null) {
            stmt.bindString(3, userGUID);
        }
 
        String sJobName = entity.getSJobName();
        if (sJobName != null) {
            stmt.bindString(4, sJobName);
        }
 
        String iSdOrderMeterMstId = entity.getISdOrderMeterMstId();
        if (iSdOrderMeterMstId != null) {
            stmt.bindString(5, iSdOrderMeterMstId);
        }
 
        String sAreaName = entity.getSAreaName();
        if (sAreaName != null) {
            stmt.bindString(6, sAreaName);
        }
 
        String sCityName = entity.getSCityName();
        if (sCityName != null) {
            stmt.bindString(7, sCityName);
        }
 
        String sCountyName = entity.getSCountyName();
        if (sCountyName != null) {
            stmt.bindString(8, sCountyName);
        }
 
        String sCustomerName = entity.getSCustomerName();
        if (sCustomerName != null) {
            stmt.bindString(9, sCustomerName);
        }
 
        String sCustomerCode = entity.getSCustomerCode();
        if (sCustomerCode != null) {
            stmt.bindString(10, sCustomerCode);
        }
 
        String sDepartmentName = entity.getSDepartmentName();
        if (sDepartmentName != null) {
            stmt.bindString(11, sDepartmentName);
        }
 
        String sPerson = entity.getSPerson();
        if (sPerson != null) {
            stmt.bindString(12, sPerson);
        }
 
        String sBillNo = entity.getSBillNo();
        if (sBillNo != null) {
            stmt.bindString(13, sBillNo);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeasureOrderInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOrderType());
 
        String userGUID = entity.getUserGUID();
        if (userGUID != null) {
            stmt.bindString(3, userGUID);
        }
 
        String sJobName = entity.getSJobName();
        if (sJobName != null) {
            stmt.bindString(4, sJobName);
        }
 
        String iSdOrderMeterMstId = entity.getISdOrderMeterMstId();
        if (iSdOrderMeterMstId != null) {
            stmt.bindString(5, iSdOrderMeterMstId);
        }
 
        String sAreaName = entity.getSAreaName();
        if (sAreaName != null) {
            stmt.bindString(6, sAreaName);
        }
 
        String sCityName = entity.getSCityName();
        if (sCityName != null) {
            stmt.bindString(7, sCityName);
        }
 
        String sCountyName = entity.getSCountyName();
        if (sCountyName != null) {
            stmt.bindString(8, sCountyName);
        }
 
        String sCustomerName = entity.getSCustomerName();
        if (sCustomerName != null) {
            stmt.bindString(9, sCustomerName);
        }
 
        String sCustomerCode = entity.getSCustomerCode();
        if (sCustomerCode != null) {
            stmt.bindString(10, sCustomerCode);
        }
 
        String sDepartmentName = entity.getSDepartmentName();
        if (sDepartmentName != null) {
            stmt.bindString(11, sDepartmentName);
        }
 
        String sPerson = entity.getSPerson();
        if (sPerson != null) {
            stmt.bindString(12, sPerson);
        }
 
        String sBillNo = entity.getSBillNo();
        if (sBillNo != null) {
            stmt.bindString(13, sBillNo);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeasureOrderInSQLite readEntity(Cursor cursor, int offset) {
        MeasureOrderInSQLite entity = new MeasureOrderInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // orderType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userGUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sJobName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iSdOrderMeterMstId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sAreaName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sCityName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sCountyName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sCustomerName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sCustomerCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sDepartmentName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sPerson
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sBillNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // sex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeasureOrderInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderType(cursor.getInt(offset + 1));
        entity.setUserGUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSJobName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setISdOrderMeterMstId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSAreaName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSCityName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSCountyName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSCustomerName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSCustomerCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSDepartmentName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSPerson(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSBillNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSex(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeasureOrderInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeasureOrderInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
