package lugang.app.huansi.net.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import lugang.app.huansi.net.db.RemarkDetailDataInSQLite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMARK_DETAIL_DATA_IN_SQLITE".
*/
public class RemarkDetailDataInSQLiteDao extends AbstractDao<RemarkDetailDataInSQLite, Long> {

    public static final String TABLENAME = "REMARK_DETAIL_DATA_IN_SQLITE";

    /**
     * Properties of entity RemarkDetailDataInSQLite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemarkCategoryId = new Property(1, String.class, "remarkCategoryId", false, "REMARK_CATEGORY_ID");
        public final static Property IId = new Property(2, String.class, "iId", false, "I_ID");
        public final static Property SMeterMarkCode = new Property(3, String.class, "sMeterMarkCode", false, "S_METER_MARK_CODE");
        public final static Property SMeterMarkName = new Property(4, String.class, "sMeterMarkName", false, "S_METER_MARK_NAME");
    };


    public RemarkDetailDataInSQLiteDao(DaoConfig config) {
        super(config);
    }
    
    public RemarkDetailDataInSQLiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMARK_DETAIL_DATA_IN_SQLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REMARK_CATEGORY_ID\" TEXT," + // 1: remarkCategoryId
                "\"I_ID\" TEXT," + // 2: iId
                "\"S_METER_MARK_CODE\" TEXT," + // 3: sMeterMarkCode
                "\"S_METER_MARK_NAME\" TEXT);"); // 4: sMeterMarkName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMARK_DETAIL_DATA_IN_SQLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemarkDetailDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String remarkCategoryId = entity.getRemarkCategoryId();
        if (remarkCategoryId != null) {
            stmt.bindString(2, remarkCategoryId);
        }
 
        String iId = entity.getIId();
        if (iId != null) {
            stmt.bindString(3, iId);
        }
 
        String sMeterMarkCode = entity.getSMeterMarkCode();
        if (sMeterMarkCode != null) {
            stmt.bindString(4, sMeterMarkCode);
        }
 
        String sMeterMarkName = entity.getSMeterMarkName();
        if (sMeterMarkName != null) {
            stmt.bindString(5, sMeterMarkName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemarkDetailDataInSQLite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String remarkCategoryId = entity.getRemarkCategoryId();
        if (remarkCategoryId != null) {
            stmt.bindString(2, remarkCategoryId);
        }
 
        String iId = entity.getIId();
        if (iId != null) {
            stmt.bindString(3, iId);
        }
 
        String sMeterMarkCode = entity.getSMeterMarkCode();
        if (sMeterMarkCode != null) {
            stmt.bindString(4, sMeterMarkCode);
        }
 
        String sMeterMarkName = entity.getSMeterMarkName();
        if (sMeterMarkName != null) {
            stmt.bindString(5, sMeterMarkName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RemarkDetailDataInSQLite readEntity(Cursor cursor, int offset) {
        RemarkDetailDataInSQLite entity = new RemarkDetailDataInSQLite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // remarkCategoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sMeterMarkCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // sMeterMarkName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemarkDetailDataInSQLite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemarkCategoryId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSMeterMarkCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSMeterMarkName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RemarkDetailDataInSQLite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RemarkDetailDataInSQLite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
